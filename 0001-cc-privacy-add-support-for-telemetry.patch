From 16115d4b61c9e2462ba5ac7a92ceb85e31db6950 Mon Sep 17 00:00:00 2001
From: Juro Bystricky <juro.bystricky@intel.com>
Date: Mon, 18 Mar 2019 11:00:52 -0700
Subject: [PATCH] cc-privacy: add support for telemetry

Add GUI support to install the bundle "telemetrics".
Add GUI support to opt-in or opt-out of telemetry.

Implementation:

Amend "Privacy" panel with additional row "Problem Reporting".
Using this setting, user will be able to opt-in or opt-out
of telemetry, if the "telemetrics" bundle is installed.
If the "telemetrics" bundle is not installed, user will get
the opportunity to install the bundle first.
This is implemeted via GUI wrappers for CLI commands:

$ sudo swupd bundle-add telemetrics

and

$ sudo telemctl opt-in
$ sudo telemctl opt-out

User will be prompted for admin password via "pkexec".

Signed-off-by: Juro Bystricky <juro.bystricky@intel.com>
---
 panels/privacy/cc-privacy-panel.c  | 308 ++++++++++++++++++++++++++++-
 panels/privacy/cc-privacy-panel.ui | 156 +++++++++++++++
 2 files changed, 460 insertions(+), 4 deletions(-)

diff --git a/panels/privacy/cc-privacy-panel.c b/panels/privacy/cc-privacy-panel.c
index f30669add..645d939e7 100644
--- a/panels/privacy/cc-privacy-panel.c
+++ b/panels/privacy/cc-privacy-panel.c
@@ -78,6 +78,15 @@ struct _CcPrivacyPanel
   GtkDialog   *software_dialog;
   GtkSwitch   *software_usage_switch;
   GtkDialog   *trash_dialog;
+  GtkDialog   *telemetry_dialog;
+  GtkLabel    *telemetry_label;
+  GtkLabel    *telemetry_explanation_label;
+  GtkLabel    *telemetry_policy_link_label;
+  GtkLabel    *telemetry_switch_label;
+  GtkSwitch   *telemetry_switch;
+  GtkLabel    *telemetry_install_label;
+  GtkButton   *telemetry_install_button;
+  GtkSpinner  *telemetry_spinner;
 
   GSettings  *lockdown_settings;
   GSettings  *lock_settings;
@@ -109,7 +118,7 @@ get_os_name (void)
 
   name = NULL;
 
-  if (g_file_get_contents ("/etc/os-release", &buffer, NULL, NULL))
+  if (g_file_get_contents ("/usr/lib/os-release", &buffer, NULL, NULL))
     {
        char *start, *end;
 
@@ -150,7 +159,7 @@ get_privacy_policy_url (void)
 
   url = NULL;
 
-  if (g_file_get_contents ("/etc/os-release", &buffer, NULL, NULL))
+  if (g_file_get_contents ("/usr/lib/os-release", &buffer, NULL, NULL))
     {
        char *start, *end;
 
@@ -1159,7 +1168,7 @@ empty_trash (CcPrivacyPanel *self)
                         _("_Empty Trash"));
 
   if (!result)
-    return; 
+    return;
 
   bus = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, NULL);
   g_dbus_connection_call (bus,
@@ -1182,7 +1191,7 @@ purge_temp (CcPrivacyPanel *self)
                         _("_Purge Temporary Files"));
 
   if (!result)
-    return; 
+    return;
 
   bus = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, NULL);
   g_dbus_connection_call (bus,
@@ -1244,6 +1253,287 @@ add_software (CcPrivacyPanel *self)
                    G_SETTINGS_BIND_DEFAULT);
 }
 
+///////////////////////////////////////// telemetry code start /////////////
+
+static gboolean tm_is_installed (void)
+{
+  // A simple test, not requiring root credentials
+  if (access ("/usr/share/clear/bundles/telemetrics", F_OK) != -1)
+    return TRUE;
+
+  return FALSE;
+}
+
+static gboolean tm_is_enabled (void)
+{
+  if (tm_is_installed ())
+    {
+    // Opted-in or out: simple test, not requiring root credentials
+    if (access ("/etc/telemetrics/opt-out", F_OK) == -1)
+      return TRUE;
+    }
+
+  return FALSE;
+}
+
+static void
+tm_show_error_dialog (CcPrivacyPanel *self, const gchar *message, const gchar *errmsg)
+{
+  GtkWidget *dialog;
+
+  dialog = gtk_message_dialog_new (GTK_WINDOW(self->telemetry_dialog),
+                                   GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT |
+                                                      GTK_DIALOG_USE_HEADER_BAR,
+                                   GTK_MESSAGE_ERROR, GTK_BUTTONS_CLOSE, "%s", message);
+  if (errmsg != NULL)
+    gtk_message_dialog_format_secondary_text (GTK_MESSAGE_DIALOG (dialog), "%s", errmsg);
+
+  g_signal_connect (dialog, "response", G_CALLBACK (gtk_widget_destroy), NULL);
+  gtk_window_present (GTK_WINDOW (dialog));
+}
+
+
+static gboolean
+tm_change_state (GtkSwitch *switcher, gboolean state, gpointer user_data);
+
+static void tm_set_label (CcPrivacyPanel *self)
+{
+  const gchar *label;
+
+  if (tm_is_installed () == FALSE)
+    label =  C_("Report problems", "Not installed");
+  else
+    label = tm_is_enabled () ?
+      C_("Report problems", "On") : C_("Report problems", "Off");
+
+  gtk_label_set_label (self->telemetry_label, label);
+
+  if (tm_is_installed ())
+    {
+    gboolean tm_enabled = tm_is_enabled();
+
+    g_signal_handlers_block_by_func (self->telemetry_switch, tm_change_state, self);
+    gtk_switch_set_active (self->telemetry_switch, tm_enabled);
+    gtk_switch_set_state (self->telemetry_switch, tm_enabled);
+    g_signal_handlers_unblock_by_func (self->telemetry_switch, tm_change_state, self);
+
+    gtk_widget_hide (GTK_WIDGET (self->telemetry_install_button));
+    gtk_widget_hide (GTK_WIDGET (self->telemetry_install_label));
+    gtk_widget_show (GTK_WIDGET (self->telemetry_switch));
+    gtk_widget_show (GTK_WIDGET (self->telemetry_switch_label));
+    }
+  else
+    {
+    gtk_widget_hide (GTK_WIDGET (self->telemetry_switch));
+    gtk_widget_hide (GTK_WIDGET (self->telemetry_switch_label));
+    gtk_widget_show (GTK_WIDGET (self->telemetry_install_button));
+    gtk_widget_show (GTK_WIDGET (self->telemetry_install_label));
+    }
+}
+
+static GIOChannel *tm_stderr_ch = NULL;
+
+static void tm_free_channel(void)
+{
+  if (tm_stderr_ch != NULL)
+    {
+      GError *error = NULL;
+      if (g_io_channel_shutdown (tm_stderr_ch, TRUE, &error) != G_IO_STATUS_NORMAL)
+        {
+        g_warning ("Could not shutdown tm_stderr IO channel: %s", error->message);
+        g_error_free (error);
+        }
+
+      g_io_channel_unref (tm_stderr_ch);
+      tm_stderr_ch = NULL;
+    }
+}
+
+static void
+tm_telemctl_watch_func (GPid pid, gint status, gpointer user_data)
+{
+  CcPrivacyPanel* self = user_data;
+  gtk_spinner_stop (GTK_SPINNER (self->telemetry_spinner));
+  g_spawn_close_pid (pid);
+
+  if (status != 0)
+    {
+      gchar *string = NULL;
+
+      g_io_channel_read_line (tm_stderr_ch, &string, NULL, NULL, NULL);
+      tm_show_error_dialog (self, _("Error"), string);
+      g_free (string);
+      tm_free_channel ();
+    }
+#if 0
+  else
+    {
+      tm_show_error_dialog (self, _("Successfully changed error reporting state"), NULL);
+    }
+#endif
+  tm_set_label (self);
+}
+
+static void
+tm_swupd_watch_func (GPid pid, gint status, gpointer user_data)
+{
+  CcPrivacyPanel* self = user_data;
+  gtk_spinner_stop (GTK_SPINNER (self->telemetry_spinner));
+  g_spawn_close_pid (pid);
+
+  if (status != 0)
+    {
+      gchar *string = NULL;
+
+      g_io_channel_read_line (tm_stderr_ch, &string, NULL, NULL, NULL);
+      tm_show_error_dialog (self, _("Failed to install Telemetry software"), string);
+      g_free (string);
+      tm_free_channel ();
+    }
+  else
+    {
+      tm_show_error_dialog (self, _("Successfully installed Telemetry software "), NULL);
+    }
+
+  gtk_widget_set_sensitive (GTK_WIDGET (self->telemetry_install_button), TRUE);
+  tm_set_label (self);
+}
+
+static gboolean
+tm_capture_command_output_async (CcPrivacyPanel *self,
+                              void (*callback)(GPid, gint, gpointer),
+                              const gchar *argv[])
+{
+  g_autoptr(GError) error = NULL;
+  GPid pid_child;
+
+  gchar **envp;
+  gint tm_stderr, tm_stdout;
+
+  envp = g_get_environ ();
+  envp = g_environ_setenv (envp, "LC_ALL", "C", TRUE);
+
+  gtk_spinner_start (GTK_SPINNER (self->telemetry_spinner));
+  gtk_widget_set_sensitive (GTK_WIDGET (self->telemetry_install_button), FALSE);
+
+  g_spawn_async_with_pipes (NULL,                            /* Working directory */
+                            argv,                            /* Argument vector */
+                            envp,                            /* Environment */
+                            G_SPAWN_DO_NOT_REAP_CHILD,       /* Flags */
+                            NULL,                            /* Child setup */
+                            NULL,                            /* Data to child setup */
+                            &pid_child,                      /* child PID */
+                            NULL,                            /* Stdin */
+                            &tm_stdout,                      /* Stdout */
+                            &tm_stderr,                      /* Stderr */
+                            &error);                         /* GError */
+
+  g_strfreev (envp);
+
+  if (error)
+    {
+    g_error ("Error in %s: %s", __func__, error->message);
+    return FALSE;
+    }
+
+  g_child_watch_add (pid_child, callback, self);
+  tm_stderr_ch = g_io_channel_unix_new (tm_stderr);
+  return TRUE;
+}
+
+static void
+tm_install (CcPrivacyPanel *self)
+{
+  gboolean result;
+  static const gchar *argv[] = {"/usr/bin/pkexec", "/usr/bin/swupd", "bundle-add", "telemetrics", NULL};
+
+  result = run_warning (GTK_WINDOW (self->telemetry_dialog),
+                        _("Install problem reporting software?"),
+                        _("Administrative privileges required"),
+                        _("_Install telemetry bundle"));
+
+  if (!result) /* User cancelled */
+    return;
+
+  result = tm_capture_command_output_async (self, tm_swupd_watch_func, argv);
+
+  if (!result)
+    tm_show_error_dialog (self, _("Failed to install Telemetry Software"), NULL);
+
+  tm_set_label (self);
+}
+
+static gboolean
+tm_change_state (GtkSwitch *switcher, gboolean state, gpointer user_data)
+{
+  CcPrivacyPanel *self = user_data;
+
+  if (!tm_is_installed ())
+    {
+    tm_install (self);
+    }
+  else
+    {
+    if (state)
+      {
+      static const gchar *argv[]  = {"/usr/bin/pkexec", "/usr/bin/telemctl", "opt-in", NULL};
+      if (!tm_capture_command_output_async(self, tm_telemctl_watch_func, argv))
+        tm_show_error_dialog (self, _("Failed to opt-in to telemetry"), NULL);
+      }
+    else
+      {
+      static const gchar *argv[] = {"/usr/bin/pkexec", "/usr/bin/telemctl", "opt-out", NULL};
+      if (!tm_capture_command_output_async(self, tm_telemctl_watch_func, argv))
+        tm_show_error_dialog (self, _("Failed to opt-out of telemetry"), NULL);
+      }
+    }
+
+  tm_set_label (self);
+  return TRUE;
+}
+
+static void
+add_telemetry (CcPrivacyPanel *self)
+{
+  char *os_name, *url, *msg;
+
+  self->telemetry_label = GTK_LABEL (gtk_label_new (""));
+  gtk_widget_show (GTK_WIDGET (self->telemetry_label));
+
+  tm_set_label (self);
+
+  add_row (self,
+           _("Problem Reporting" ),
+           self->telemetry_dialog,
+           GTK_WIDGET (self->telemetry_label));
+
+  g_signal_connect (self->telemetry_dialog, "delete-event",
+                    G_CALLBACK (gtk_widget_hide_on_delete), NULL);
+
+  g_signal_connect (self->telemetry_switch, "state-set",
+                    G_CALLBACK (tm_change_state), self);
+
+  os_name = get_os_name ();
+
+  /* translators: '%s' is the distributor's name, such as 'Clear Linux OS' */
+  msg = g_strdup_printf
+        (_("Sending reports of technical problems helps us improve %s. Reports are sent anonymously and are scrubbed of personal data."),
+        os_name);
+
+  g_free (os_name);
+  gtk_label_set_text (self->telemetry_explanation_label, msg);
+  g_free (msg);
+  url = get_privacy_policy_url ();
+  msg = g_strdup_printf ("<a href=\"%s\">%s</a>", url, _("Privacy Policy"));
+  g_free (url);
+  gtk_label_set_markup (self->telemetry_policy_link_label, msg);
+  g_free (msg);
+  g_signal_connect_swapped (self->telemetry_install_button, "clicked",
+                            G_CALLBACK (tm_install), self);
+ }
+
+///////////////////////////////////////// telemetry code end /////////////
+
 static void
 abrt_appeared_cb (GDBusConnection *connection,
                   const gchar     *name,
@@ -1329,6 +1619,7 @@ cc_privacy_panel_finalize (GObject *object)
   g_clear_pointer ((GtkWidget **)&self->trash_dialog, gtk_widget_destroy);
   g_clear_pointer ((GtkWidget **)&self->software_dialog, gtk_widget_destroy);
   g_clear_pointer ((GtkWidget **)&self->abrt_dialog, gtk_widget_destroy);
+  g_clear_pointer ((GtkWidget **)&self->telemetry_dialog, gtk_widget_destroy);
   g_clear_object (&self->lockdown_settings);
   g_clear_object (&self->lock_settings);
   g_clear_object (&self->privacy_settings);
@@ -1401,6 +1692,7 @@ cc_privacy_panel_init (CcPrivacyPanel *self)
   add_trash_temp (self);
   add_software (self);
   add_abrt (self);
+  add_telemetry (self);
 
   g_signal_connect (self->lockdown_settings, "changed",
                     G_CALLBACK (on_lockdown_settings_changed), self);
@@ -1424,6 +1716,14 @@ cc_privacy_panel_class_init (CcPrivacyPanelClass *klass)
   gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, abrt_explanation_label);
   gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, abrt_policy_link_label);
   gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, abrt_switch);
+  gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, telemetry_dialog);
+  gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, telemetry_explanation_label);
+  gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, telemetry_policy_link_label);
+  gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, telemetry_switch);
+  gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, telemetry_switch_label);
+  gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, telemetry_install_button);
+  gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, telemetry_install_label);
+  gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, telemetry_spinner);
   gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, automatic_screen_lock_switch);
   gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, clear_recent_button);
   gtk_widget_class_bind_template_child (widget_class, CcPrivacyPanel, empty_trash_button);
diff --git a/panels/privacy/cc-privacy-panel.ui b/panels/privacy/cc-privacy-panel.ui
index c043116a7..d6ba94657 100644
--- a/panels/privacy/cc-privacy-panel.ui
+++ b/panels/privacy/cc-privacy-panel.ui
@@ -1269,4 +1269,160 @@ All the information we collect is made anonymous, and we will never share your d
     </child>
   </object>
 
+  <object class="GtkDialog" id="telemetry_dialog">
+    <property name="can_focus">False</property>
+    <property name="border_width">5</property>
+    <property name="title" translatable="yes">Problem Reporting</property>
+    <property name="resizable">False</property>
+    <property name="type_hint">dialog</property>
+    <property name="use_header_bar">1</property>
+    <child internal-child="vbox">
+      <object class="GtkBox">
+        <property name="can_focus">False</property>
+        <property name="orientation">vertical</property>
+        <property name="spacing">2</property>
+        <property name="margin_start">12</property>
+        <property name="margin_end">12</property>
+        <property name="margin_top">12</property>
+        <property name="margin_bottom">12</property>
+        <child>
+          <object class="GtkSpinner" id="telemetry_spinner">
+             <property name="name">installing_spinner</property>
+             <property name="visible">True</property>
+             <property name="can_focus">False</property>
+             <property name="halign">center</property>
+             <property name="valign">center</property>
+          </object>
+          <packing>
+             <property name="name">installing</property>
+             <property name="position">1</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkLabel" id="telemetry_explanation_label">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="margin_start">12</property>
+            <property name="margin_end">12</property>
+            <property name="margin_top">6</property>
+            <property name="margin_bottom">12</property>
+            <property name="xalign">0</property>
+            <property name="label" translatable="no">(dynamic)</property>
+            <property name="wrap">True</property>
+            <property name="max_width_chars">50</property>
+            <style>
+              <class name="dim-label"/>
+            </style>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkLabel" id="telemetry_policy_link_label">
+            <property name="label" translatable="no">(dynamic)</property>
+            <property name="visible">True</property>
+            <property name="can_focus">True</property>
+            <property name="use_markup">True</property>
+            <property name="receives_default">True</property>
+            <property name="halign">start</property>
+            <property name="margin_start">12</property>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="position">1</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkGrid">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="margin_start">12</property>
+            <property name="margin_end">12</property>
+            <property name="margin_top">12</property>
+            <property name="margin_bottom">12</property>
+            <property name="row_spacing">12</property>
+            <property name="column_spacing">6</property>
+            <child>
+              <object class="GtkLabel" id="telemetry_switch_label">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="hexpand">True</property>
+                <property name="xalign">0</property>
+                <property name="label" translatable="yes">_Automatic Problem Reporting</property>
+                <property name="use_underline">True</property>
+                <property name="mnemonic_widget">telemetry_switch</property>
+              </object>
+              <packing>
+                <property name="left_attach">0</property>
+                <property name="top_attach">1</property>
+                <property name="width">1</property>
+                <property name="height">1</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkSwitch" id="telemetry_switch">
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="halign">end</property>
+                <property name="valign">center</property>
+              </object>
+              <packing>
+                <property name="left_attach">1</property>
+                <property name="top_attach">1</property>
+                <property name="width">1</property>
+                <property name="height">1</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkLabel" id="telemetry_install_label">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="hexpand">True</property>
+                <property name="xalign">0</property>
+                <property name="label" translatable="yes">_In order to report problems, additional software needs to be installed first. This is a one time installation. After the software is installed, you can enable or disable error reporting as you desire.</property>
+                <property name="use_underline">True</property>
+                <property name="mnemonic_widget">telemetry_install_button</property>
+                <property name="wrap">True</property>
+                <property name="max_width_chars">50</property>
+              </object>
+              <packing>
+                <property name="left_attach">0</property>
+                <property name="top_attach">1</property>
+                <property name="width">1</property>
+                <property name="height">1</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="telemetry_install_button">
+                <property name="label" translatable="yes">_Install Telemetry Software…</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="xalign">0</property>
+                <property name="use_underline">True</property>
+              </object>
+              <packing>
+                <property name="left_attach">0</property>
+                <property name="top_attach">2</property>
+                <property name="width">1</property>
+                <property name="height">1</property>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="position">2</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+  </object>
+
 </interface>
-- 
2.21.0

